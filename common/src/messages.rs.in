// Auxillary data structures

/// Short summary data used to tell a client about a network.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetInfo {
    pub id: String,
    pub nick: String,
    pub buffers: Vec<BufInfo>,
}

/// Short summary data used to tell a client about a buffer.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BufInfo {
    pub id: BufTarget,
    pub joined: bool,
}

impl BufInfo {
    pub fn name(&self) -> &str {
        self.id.name()
    }
}


/// This struct identifies a particular buffer within a network. It
/// distinguishes between channels, private messages, and network buffers.
#[derive(Debug, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
pub enum BufTarget {
    /// An IRC channel buffer
    Channel(BufId),
    /// An IRC private message buffer with the given user.
    Private(BufId),
    /// The network's status buffer.
    Network,
}

impl BufTarget {
    pub fn name(&self) -> &str {
        match *self {
            BufTarget::Channel(ref n) => n,
            BufTarget::Private(ref n) => n,
            BufTarget::Network => "*network*",
        }
    }
}


/// Wrapper for password strings which doesn't print passwords in `format!`.
#[derive(Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Password(pub String);

impl fmt::Debug for Password {
    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
        write!(f, "\"hunter2\"")
    }
}

impl fmt::Display for Password {
    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
        write!(f, "hunter2")
    }
}


/// Enumeration of the kinds of messages we can send.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum SendMsgKind {
    PrivMsg,
    Notice,
    Action,
}

impl SendMsgKind {
    pub fn to_msg_kind(&self) -> MsgKind {
        match *self {
            SendMsgKind::PrivMsg => MsgKind::PrivMsg,
            SendMsgKind::Notice => MsgKind::Notice,
            SendMsgKind::Action => MsgKind::Action,
        }
    }
}


// Message types

mod core {
    use line::BufferLine;
    use types::{NetId, BufId};
    use alert::Alert;
    use super::{BufTarget, NetInfo, BufInfo};

    /// Messages sent from the core.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum CoreMsg {
        /// Indicates the core has accepted the client's authentication and the
        /// connection can proceed.
        AuthOk,

        /// Indicates the client has failed to authenticate and the connection
        /// should be aborted.
        AuthErr,

        /// This message tells the client about a list of networks and their buffers.
        Networks(Vec<NetInfo>),

        /// Tells the client about global buffers.
        GlobalBufs(Vec<BufInfo>),

        /// Wrapper for messages about a specific network.
        NetMsg(NetId, CoreNetMsg),

        /// Wrapper for messages about a global buffer.
        BufMsg(BufId, CoreBufMsg),

        /// Lets the client know about some alerts that occurred.
        Alerts(Vec<Alert>),

        /// Tells the client to display the given status message.
        Status(String),
    }

    /// Messages sent from the core about a specific network.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum CoreNetMsg {
        /// Tells the client about changes in the network's connection.
        Connection(bool),

        /// Wrapper for messages about a buffer within the network.
        BufMsg(BufTarget, CoreBufMsg),

        /// Tells the client about a list of buffers within the network.
        Buffers(Vec<BufInfo>),

        /// Tells the client about a new buffer that the client told the core to
        /// join.
        ///
        /// The usual client behavior for this message is to switch to the
        /// buffer. It is only sent to the client who requested the join.
        Joined(BufInfo),

        /// Tells the client their nick changed.
        NickChanged(String),
    }

    /// Messages sent from the core about a specific buffer.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum CoreBufMsg {
        /// Tells the client about the buffer's state.
        State {
            /// For channel buffers, this indicates whether the user is in the
            /// channel. For private message buffers, this indicates if the
            /// other user is online or not.
            joined: bool,
        },

        /// New lines have been posted to the bottom of the buffer.
        ///
        /// This is for messages that have just been received, not for requested
        /// scrollback. Lines are sent with the oldest first.
        NewLines(Vec<BufferLine>),

        /// Used to send scrollback. These lines should be appended to the top
        /// of the buffer. Lines are sent in order from newest to oldest.
        Scrollback(Vec<BufferLine>),
    }
}

mod client {
    use types::{NetId, BufId, Nick};
    use super::{BufTarget, SendMsgKind, Password};

    /// Messages sent from the client.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum ClientMsg {
        /// Attempts to authenticate the client as the given user with the given
        /// password. This should be the first message sent. Any message sent
        /// before an `AuthOk` response is received is an error and will cause
        /// the connection to be dropped.
        Authenticate(String, Password),

        /// Wrapper for messages about a network.
        NetMsg(NetId, ClientNetMsg),

        /// Wrapper for messages about a global buffer.
        BufMsg(BufId, ClientBufMsg),

        /// Requests that the server re-send the network list.
        ListNets,

        /// Requests that the server re-send the global buffers list.
        ListGlobalBufs,
    }

    /// Messages from the client about a network.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum ClientNetMsg {
        /// Wrapper for messages about a channel in this network.
        BufMsg(BufTarget, ClientBufMsg),

        /// Requests that the server re-send the buffer list for this network.
        ListBufs,

        /// Requests that the core join the channel with the given name.
        ///
        /// If successful, the core will add a buffer with the given channel
        /// name and send `Joined` to the client that sent the request.
        JoinChan(String),

        /// Requests that the core part the channel with the given message.
        PartChan(String, Option<String>),

        /// Requests that the core change the user's nick.
        ChangeNick(Nick),
    }

    /// Messages from the client about a buffer.
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub enum ClientBufMsg {
        /// Sends a message to the buffer.
        SendMsg(String, SendMsgKind),

        /// Requests that the core send the client `count` many lines of
        /// scrollback. The core will keep track of which lines haven't been
        /// sent, so there's no need to specify.
        FetchLogs(usize),
    }
}
